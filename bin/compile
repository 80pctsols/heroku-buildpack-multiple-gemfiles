#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# This was a great aid to writing this script:
# https://github.com/heroku/heroku-buildpack-ci-postgresql/blob/master/bin/compile

# fail fast
#set -e

# debug
#set -x

echo "-----> In bin/compile"

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BUILDPACK_DIR="$(dirname $(dirname $0))"

function error() {
  echo " !     $*" >&2
  exit 1
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

# The heroku ruby buildpack will have already installed the gems for the default Gemfile, so now
# install the missing gems from Gemfile_que1.
echo "-----> Installing Gemfile_que1 gems"
cd $BUILD_DIR
bundle_without="development:test"
set -o pipefail # Enable pipefail so failure exit code from bundle install will not be lost by pipe to indent.
echo "BUNDLE_GEMFILE=Gemfile_que1 BUNDLE_WITHOUT=$bundle_without BUNDLE_PATH=vendor/bundle BUNDLE_BIN=vendor/bundle/bin BUNDLE_DEPLOYMENT=1 bundle install -j4"
BUNDLE_GEMFILE=Gemfile_que1 BUNDLE_WITHOUT=$bundle_without BUNDLE_PATH=vendor/bundle BUNDLE_BIN=vendor/bundle/bin BUNDLE_DEPLOYMENT=1 bundle install -j4 | indent
bundle_install_status=$?
set +o pipefail # Disable pipefail, only needed for above command as it is pipes to indent.

if [ $bundle_install_status -ne 0 ]; then
  error "bundle install error: This can happen when Gemfile_que1.lock falls out of sync with Gemfile_que1. Check the committed Gemfile_que1.lock is up-to-date."
fi

echo "-----> Multiple Gemfiles done"
