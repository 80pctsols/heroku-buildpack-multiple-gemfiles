#!/usr/bin/env bash
# bin/test-compile <build-dir> <cache-dir>

# This was a great aid to writing this script:
# https://github.com/heroku/heroku-buildpack-ci-postgresql/blob/master/bin/compile

# fail fast
set -e

# debug
#set -x

echo "-----> In bin/test-compile"

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BUILDPACK_DIR="$(dirname $(dirname $0))"

function error() {
  echo " !     $*" >&2
  exit 1
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}


# The heroku ruby buildpack will have already installed the gems for the default Gemfile, so now
# install the missing gems from Gemfile_next. We want gem versions from both Gemfiles to be in the
# app for parity with the production slug.
echo "-----> Installing Gemfile_next gems"
cd $BUILD_DIR
bundle_without="development"
BUNDLE_GEMFILE=Gemfile_next bundle install --without $bundle_without --path vendor/bundle --binstubs vendor/bundle/bin -j4 --deployment | indent

# TODO: On a dyno restart, is a fresh slug used or will the existing slug be used with the
# Gemfiles already shuffled? Consider using BUNDLE_GEMFILE env var instead. Or always reset
# files on startup, moving Gemfile_prev back to Gemfile etc.? Need to make sure that if
# a dyno is removed from DEPENDENCIES_NEXT_DYNOS that it uses the old Gemfile on restart.
echo "-----> Writing .profile.d/multiple-gemfiles.sh to run on dyno startup"
mkdir -p .profile.d
cat<<\EOF > .profile.d/multiple-gemfiles.sh
server_id=$CI_NODE_INDEX

echo "[multiple-gemfiles.sh] Preparing env vars for server: $server_id"
echo "---------------------> Unsetting DEPENDENCIES_NEXT"
unset DEPENDENCIES_NEXT
echo "---------------------> Unsetting BUNDLE_GEMFILE"
unset BUNDLE_GEMFILE

# DEPENDENCIES_NEXT_CI_NODES is a comma-separated string of CI node indexes that should
# use Gemfile_next, e.g. DEPENDENCIES_NEXT_CI_NODES=5,6,7
next_server_ids=$DEPENDENCIES_NEXT_CI_NODES

if [ -n "$next_server_ids" ]; then
  # Split on comma into an array
  next_servers=($(echo $next_server_ids | tr "," " "))

  for ((i=0; i<${#next_servers[@]}; i++)); do
    if [[ ${next_servers[$i]} == ${server_id} ]]; then
      echo "---------------------> Setting DEPENDENCIES_NEXT=true"
      export DEPENDENCIES_NEXT=true
      echo "---------------------> Setting BUNDLE_GEMFILE=$HOME/Gemfile_next"
      export BUNDLE_GEMFILE=$HOME/Gemfile_next
    fi
  done
fi
EOF

echo "-----> Multiple Gemfiles done"
