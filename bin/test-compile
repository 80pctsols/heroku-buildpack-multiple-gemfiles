#!/usr/bin/env bash
# bin/test-compile <build-dir> <cache-dir>

# This was a great aid to writing this script:
# https://github.com/heroku/heroku-buildpack-ci-postgresql/blob/master/bin/compile

# fail fast
set -e

# debug
#set -x

echo "-----> In bin/test-compile"

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BUILDPACK_DIR="$(dirname $(dirname $0))"

function error() {
  echo " !     $*" >&2
  exit 1
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}


# The heroku ruby buildpack will have already installed the gems for the default Gemfile, so now
# install the missing gems from Gemfile_next. We want gem versions from both Gemfiles to be in the
# app for parity with the production slug.
echo "-----> Installing Gemfile_next gems"
cd $BUILD_DIR
BUNDLE_GEMFILE=Gemfile_next bundle install --without development --path vendor/bundle --binstubs vendor/bundle/bin -j4 --deployment | indent

# TODO: On a dyno restart, is a fresh slug used or will the existing slug be used with the
# Gemfiles already shuffled? Consider using BUNDLE_GEMFILE env var instead. Or always reset
# files on startup, moving Gemfile_prev back to Gemfile etc.? Need to make sure that if
# a dyno is removed from DEPENDENCIES_NEXT_DYNOS that it uses the old Gemfile on restart.
echo "-----> Writing .profile.d/multiple-gemfiles.sh to run on dyno startup"
mkdir -p .profile.d
cat<<\EOF > .profile.d/multiple-gemfiles.sh
# if [ -n "$DEPENDENCIES_NEXT_DYNOS" ]; then
if [ -n "$DEPENDENCIES_NEXT_CI_NODES" ]; then
  # Split on comma into an array of dynos
  # TODO: Test on string without comma but single dyno name
  next_dynos=($(echo $DEPENDENCIES_NEXT_CI_NODES | tr "," " "))

  if [ -n "$CI_NODE_INDEX" ]; then
    dyno=$CI_NODE_INDEX
  elif [ -n "$DYNO" ]; then
    dyno=$DYNO
  fi

  for ((i=0; i<${#next_dynos[@]}; i++)); do
    if [[ ${next_dynos[$i]} == ${dyno} ]]; then
      # echo "[multiple-gemfiles.sh] Setting DEPENDENCIES_NEXT for dyno: $dyno"
      # export DEPENDENCIES_NEXT=true

      if [ -e $HOME/Gemfile_next ]; then
        echo "[multiple-gemfiles.sh] Preparing env vars for dyno: $dyno"
        echo "---------------------> Setting DEPENDENCIES_NEXT=true"
        export DEPENDENCIES_NEXT=true
        echo "---------------------> Setting BUNDLE_GEMFILE=Gemfile_next"
        export BUNDLE_GEMFILE=Gemfile_next
        # echo "[multiple-gemfiles.sh] Preparing Gemfile for dyno: $dyno"
        # echo "[multiple-gemfiles.sh] Shuffling Gemfiles to use Gemfile_next"
        # mv "$HOME/Gemfile" "$HOME/Gemfile_prev"
        # mv "$HOME/Gemfile.lock" "$HOME/Gemfile_prev.lock"
        # mv "$HOME/Gemfile_next" "$HOME/Gemfile"
        # mv "$HOME/Gemfile_next.lock" "$HOME/Gemfile.lock"
      else
        echo "[multiple-gemfiles.sh] Preparing env vars for dyno: $dyno"
        echo "---------------------> Unsetting DEPENDENCIES_NEXT"
        unset DEPENDENCIES_NEXT
        echo "---------------------> Unsetting BUNDLE_GEMFILE"
        unset BUNDLE_GEMFILE
      fi
    fi
  done
fi
EOF

echo "-----> Multiple Gemfiles done"
